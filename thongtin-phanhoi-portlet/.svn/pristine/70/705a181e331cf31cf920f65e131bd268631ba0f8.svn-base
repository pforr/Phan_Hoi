/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.ns.yeucaugiaitrinh.dao.service.persistence;

import com.liferay.portal.kernel.bean.PortletBeanLocatorUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.ReferenceRegistry;
import com.liferay.portal.service.ServiceContext;

import vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh;

import java.util.List;

/**
 * The persistence utility for the trang thai giai trinh service. This utility wraps {@link TrangThaiGiaiTrinhPersistenceImpl} and provides direct access to the database for CRUD operations. This utility should only be used by the service layer, as it must operate within a transaction. Never access this utility in a JSP, controller, model, or other front-end class.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author tubq
 * @see TrangThaiGiaiTrinhPersistence
 * @see TrangThaiGiaiTrinhPersistenceImpl
 * @generated
 */
public class TrangThaiGiaiTrinhUtil {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify this class directly. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */

	/**
	 * @see com.liferay.portal.service.persistence.BasePersistence#clearCache()
	 */
	public static void clearCache() {
		getPersistence().clearCache();
	}

	/**
	 * @see com.liferay.portal.service.persistence.BasePersistence#clearCache(com.liferay.portal.model.BaseModel)
	 */
	public static void clearCache(TrangThaiGiaiTrinh trangThaiGiaiTrinh) {
		getPersistence().clearCache(trangThaiGiaiTrinh);
	}

	/**
	 * @see com.liferay.portal.service.persistence.BasePersistence#countWithDynamicQuery(DynamicQuery)
	 */
	public static long countWithDynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return getPersistence().countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * @see com.liferay.portal.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery)
	 */
	public static List<TrangThaiGiaiTrinh> findWithDynamicQuery(
		DynamicQuery dynamicQuery) throws SystemException {
		return getPersistence().findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * @see com.liferay.portal.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery, int, int)
	 */
	public static List<TrangThaiGiaiTrinh> findWithDynamicQuery(
		DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return getPersistence().findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * @see com.liferay.portal.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery, int, int, OrderByComparator)
	 */
	public static List<TrangThaiGiaiTrinh> findWithDynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return getPersistence()
				   .findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * @see com.liferay.portal.service.persistence.BasePersistence#update(com.liferay.portal.model.BaseModel)
	 */
	public static TrangThaiGiaiTrinh update(
		TrangThaiGiaiTrinh trangThaiGiaiTrinh) throws SystemException {
		return getPersistence().update(trangThaiGiaiTrinh);
	}

	/**
	 * @see com.liferay.portal.service.persistence.BasePersistence#update(com.liferay.portal.model.BaseModel, ServiceContext)
	 */
	public static TrangThaiGiaiTrinh update(
		TrangThaiGiaiTrinh trangThaiGiaiTrinh, ServiceContext serviceContext)
		throws SystemException {
		return getPersistence().update(trangThaiGiaiTrinh, serviceContext);
	}

	/**
	* Caches the trang thai giai trinh in the entity cache if it is enabled.
	*
	* @param trangThaiGiaiTrinh the trang thai giai trinh
	*/
	public static void cacheResult(
		vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh trangThaiGiaiTrinh) {
		getPersistence().cacheResult(trangThaiGiaiTrinh);
	}

	/**
	* Caches the trang thai giai trinhs in the entity cache if it is enabled.
	*
	* @param trangThaiGiaiTrinhs the trang thai giai trinhs
	*/
	public static void cacheResult(
		java.util.List<vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh> trangThaiGiaiTrinhs) {
		getPersistence().cacheResult(trangThaiGiaiTrinhs);
	}

	/**
	* Creates a new trang thai giai trinh with the primary key. Does not add the trang thai giai trinh to the database.
	*
	* @param id the primary key for the new trang thai giai trinh
	* @return the new trang thai giai trinh
	*/
	public static vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh create(
		long id) {
		return getPersistence().create(id);
	}

	/**
	* Removes the trang thai giai trinh with the primary key from the database. Also notifies the appropriate model listeners.
	*
	* @param id the primary key of the trang thai giai trinh
	* @return the trang thai giai trinh that was removed
	* @throws vn.dtt.ns.yeucaugiaitrinh.dao.NoSuchTrangThaiGiaiTrinhException if a trang thai giai trinh with the primary key could not be found
	* @throws SystemException if a system exception occurred
	*/
	public static vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh remove(
		long id)
		throws com.liferay.portal.kernel.exception.SystemException,
			vn.dtt.ns.yeucaugiaitrinh.dao.NoSuchTrangThaiGiaiTrinhException {
		return getPersistence().remove(id);
	}

	public static vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh updateImpl(
		vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh trangThaiGiaiTrinh)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getPersistence().updateImpl(trangThaiGiaiTrinh);
	}

	/**
	* Returns the trang thai giai trinh with the primary key or throws a {@link vn.dtt.ns.yeucaugiaitrinh.dao.NoSuchTrangThaiGiaiTrinhException} if it could not be found.
	*
	* @param id the primary key of the trang thai giai trinh
	* @return the trang thai giai trinh
	* @throws vn.dtt.ns.yeucaugiaitrinh.dao.NoSuchTrangThaiGiaiTrinhException if a trang thai giai trinh with the primary key could not be found
	* @throws SystemException if a system exception occurred
	*/
	public static vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh findByPrimaryKey(
		long id)
		throws com.liferay.portal.kernel.exception.SystemException,
			vn.dtt.ns.yeucaugiaitrinh.dao.NoSuchTrangThaiGiaiTrinhException {
		return getPersistence().findByPrimaryKey(id);
	}

	/**
	* Returns the trang thai giai trinh with the primary key or returns <code>null</code> if it could not be found.
	*
	* @param id the primary key of the trang thai giai trinh
	* @return the trang thai giai trinh, or <code>null</code> if a trang thai giai trinh with the primary key could not be found
	* @throws SystemException if a system exception occurred
	*/
	public static vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh fetchByPrimaryKey(
		long id) throws com.liferay.portal.kernel.exception.SystemException {
		return getPersistence().fetchByPrimaryKey(id);
	}

	/**
	* Returns all the trang thai giai trinhs.
	*
	* @return the trang thai giai trinhs
	* @throws SystemException if a system exception occurred
	*/
	public static java.util.List<vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh> findAll()
		throws com.liferay.portal.kernel.exception.SystemException {
		return getPersistence().findAll();
	}

	/**
	* Returns a range of all the trang thai giai trinhs.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.ns.yeucaugiaitrinh.dao.model.impl.TrangThaiGiaiTrinhModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of trang thai giai trinhs
	* @param end the upper bound of the range of trang thai giai trinhs (not inclusive)
	* @return the range of trang thai giai trinhs
	* @throws SystemException if a system exception occurred
	*/
	public static java.util.List<vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh> findAll(
		int start, int end)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getPersistence().findAll(start, end);
	}

	/**
	* Returns an ordered range of all the trang thai giai trinhs.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.ns.yeucaugiaitrinh.dao.model.impl.TrangThaiGiaiTrinhModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of trang thai giai trinhs
	* @param end the upper bound of the range of trang thai giai trinhs (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of trang thai giai trinhs
	* @throws SystemException if a system exception occurred
	*/
	public static java.util.List<vn.dtt.ns.yeucaugiaitrinh.dao.model.TrangThaiGiaiTrinh> findAll(
		int start, int end,
		com.liferay.portal.kernel.util.OrderByComparator orderByComparator)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getPersistence().findAll(start, end, orderByComparator);
	}

	/**
	* Removes all the trang thai giai trinhs from the database.
	*
	* @throws SystemException if a system exception occurred
	*/
	public static void removeAll()
		throws com.liferay.portal.kernel.exception.SystemException {
		getPersistence().removeAll();
	}

	/**
	* Returns the number of trang thai giai trinhs.
	*
	* @return the number of trang thai giai trinhs
	* @throws SystemException if a system exception occurred
	*/
	public static int countAll()
		throws com.liferay.portal.kernel.exception.SystemException {
		return getPersistence().countAll();
	}

	public static TrangThaiGiaiTrinhPersistence getPersistence() {
		if (_persistence == null) {
			_persistence = (TrangThaiGiaiTrinhPersistence)PortletBeanLocatorUtil.locate(vn.dtt.ns.yeucaugiaitrinh.dao.service.ClpSerializer.getServletContextName(),
					TrangThaiGiaiTrinhPersistence.class.getName());

			ReferenceRegistry.registerReference(TrangThaiGiaiTrinhUtil.class,
				"_persistence");
		}

		return _persistence;
	}

	/**
	 * @deprecated As of 6.2.0
	 */
	public void setPersistence(TrangThaiGiaiTrinhPersistence persistence) {
	}

	private static TrangThaiGiaiTrinhPersistence _persistence;
}