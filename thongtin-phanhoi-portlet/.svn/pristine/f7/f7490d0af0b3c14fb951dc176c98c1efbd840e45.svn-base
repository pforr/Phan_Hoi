/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.ns.thongtinphanhoi.dao.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoi;
import vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoiModel;
import vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TopicPhanHoi service. Represents a row in the &quot;thongtinphanhoi_TopicPhanHoi&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TopicPhanHoiImpl}.
 * </p>
 *
 * @author tubq
 * @see TopicPhanHoiImpl
 * @see vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoi
 * @see vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoiModel
 * @generated
 */
@JSON(strict = true)
public class TopicPhanHoiModelImpl extends BaseModelImpl<TopicPhanHoi>
	implements TopicPhanHoiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a topic phan hoi model instance should use the {@link vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoi} interface instead.
	 */
	public static final String TABLE_NAME = "thongtinphanhoi_TopicPhanHoi";
	public static final Object[][] TABLE_COLUMNS = {
			{ "code", Types.VARCHAR },
			{ "matinh", Types.VARCHAR },
			{ "mahuyen", Types.VARCHAR },
			{ "name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table thongtinphanhoi_TopicPhanHoi (code VARCHAR(75) not null primary key,matinh VARCHAR(75) null,mahuyen VARCHAR(75) null,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table thongtinphanhoi_TopicPhanHoi";
	public static final String ORDER_BY_JPQL = " ORDER BY topicPhanHoi.topicCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY thongtinphanhoi_TopicPhanHoi.code ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoi"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoi"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TopicPhanHoi toModel(TopicPhanHoiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TopicPhanHoi model = new TopicPhanHoiImpl();

		model.setTopicCode(soapModel.getTopicCode());
		model.setMaTinh(soapModel.getMaTinh());
		model.setMaHuyen(soapModel.getMaHuyen());
		model.setTopicName(soapModel.getTopicName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TopicPhanHoi> toModels(TopicPhanHoiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TopicPhanHoi> models = new ArrayList<TopicPhanHoi>(soapModels.length);

		for (TopicPhanHoiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoi"));

	public TopicPhanHoiModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _topicCode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setTopicCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _topicCode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return TopicPhanHoi.class;
	}

	@Override
	public String getModelClassName() {
		return TopicPhanHoi.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("topicCode", getTopicCode());
		attributes.put("maTinh", getMaTinh());
		attributes.put("maHuyen", getMaHuyen());
		attributes.put("topicName", getTopicName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String topicCode = (String)attributes.get("topicCode");

		if (topicCode != null) {
			setTopicCode(topicCode);
		}

		String maTinh = (String)attributes.get("maTinh");

		if (maTinh != null) {
			setMaTinh(maTinh);
		}

		String maHuyen = (String)attributes.get("maHuyen");

		if (maHuyen != null) {
			setMaHuyen(maHuyen);
		}

		String topicName = (String)attributes.get("topicName");

		if (topicName != null) {
			setTopicName(topicName);
		}
	}

	@JSON
	@Override
	public String getTopicCode() {
		if (_topicCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _topicCode;
		}
	}

	@Override
	public void setTopicCode(String topicCode) {
		_topicCode = topicCode;
	}

	@JSON
	@Override
	public String getMaTinh() {
		if (_maTinh == null) {
			return StringPool.BLANK;
		}
		else {
			return _maTinh;
		}
	}

	@Override
	public void setMaTinh(String maTinh) {
		_maTinh = maTinh;
	}

	@JSON
	@Override
	public String getMaHuyen() {
		if (_maHuyen == null) {
			return StringPool.BLANK;
		}
		else {
			return _maHuyen;
		}
	}

	@Override
	public void setMaHuyen(String maHuyen) {
		_maHuyen = maHuyen;
	}

	@JSON
	@Override
	public String getTopicName() {
		if (_topicName == null) {
			return StringPool.BLANK;
		}
		else {
			return _topicName;
		}
	}

	@Override
	public void setTopicName(String topicName) {
		_topicName = topicName;
	}

	@Override
	public TopicPhanHoi toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TopicPhanHoi)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TopicPhanHoiImpl topicPhanHoiImpl = new TopicPhanHoiImpl();

		topicPhanHoiImpl.setTopicCode(getTopicCode());
		topicPhanHoiImpl.setMaTinh(getMaTinh());
		topicPhanHoiImpl.setMaHuyen(getMaHuyen());
		topicPhanHoiImpl.setTopicName(getTopicName());

		topicPhanHoiImpl.resetOriginalValues();

		return topicPhanHoiImpl;
	}

	@Override
	public int compareTo(TopicPhanHoi topicPhanHoi) {
		String primaryKey = topicPhanHoi.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TopicPhanHoi)) {
			return false;
		}

		TopicPhanHoi topicPhanHoi = (TopicPhanHoi)obj;

		String primaryKey = topicPhanHoi.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TopicPhanHoi> toCacheModel() {
		TopicPhanHoiCacheModel topicPhanHoiCacheModel = new TopicPhanHoiCacheModel();

		topicPhanHoiCacheModel.topicCode = getTopicCode();

		String topicCode = topicPhanHoiCacheModel.topicCode;

		if ((topicCode != null) && (topicCode.length() == 0)) {
			topicPhanHoiCacheModel.topicCode = null;
		}

		topicPhanHoiCacheModel.maTinh = getMaTinh();

		String maTinh = topicPhanHoiCacheModel.maTinh;

		if ((maTinh != null) && (maTinh.length() == 0)) {
			topicPhanHoiCacheModel.maTinh = null;
		}

		topicPhanHoiCacheModel.maHuyen = getMaHuyen();

		String maHuyen = topicPhanHoiCacheModel.maHuyen;

		if ((maHuyen != null) && (maHuyen.length() == 0)) {
			topicPhanHoiCacheModel.maHuyen = null;
		}

		topicPhanHoiCacheModel.topicName = getTopicName();

		String topicName = topicPhanHoiCacheModel.topicName;

		if ((topicName != null) && (topicName.length() == 0)) {
			topicPhanHoiCacheModel.topicName = null;
		}

		return topicPhanHoiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{topicCode=");
		sb.append(getTopicCode());
		sb.append(", maTinh=");
		sb.append(getMaTinh());
		sb.append(", maHuyen=");
		sb.append(getMaHuyen());
		sb.append(", topicName=");
		sb.append(getTopicName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.ns.thongtinphanhoi.dao.model.TopicPhanHoi");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>topicCode</column-name><column-value><![CDATA[");
		sb.append(getTopicCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maTinh</column-name><column-value><![CDATA[");
		sb.append(getMaTinh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maHuyen</column-name><column-value><![CDATA[");
		sb.append(getMaHuyen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topicName</column-name><column-value><![CDATA[");
		sb.append(getTopicName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TopicPhanHoi.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TopicPhanHoi.class
		};
	private String _topicCode;
	private String _maTinh;
	private String _maHuyen;
	private String _topicName;
	private TopicPhanHoi _escapedModel;
}