/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.ns.yeucaugiaitrinh.dao.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import vn.dtt.ns.yeucaugiaitrinh.dao.model.YeuCauGiaiTrinh;
import vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhLocalService;
import vn.dtt.ns.yeucaugiaitrinh.dao.service.persistence.ChiTietYeuCauGiaiTrinhPersistence;
import vn.dtt.ns.yeucaugiaitrinh.dao.service.persistence.TrangThaiGiaiTrinhFinder;
import vn.dtt.ns.yeucaugiaitrinh.dao.service.persistence.TrangThaiGiaiTrinhPersistence;
import vn.dtt.ns.yeucaugiaitrinh.dao.service.persistence.YeuCauGiaiTrinhFinder;
import vn.dtt.ns.yeucaugiaitrinh.dao.service.persistence.YeuCauGiaiTrinhPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the yeu cau giai trinh local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link vn.dtt.ns.yeucaugiaitrinh.dao.service.impl.YeuCauGiaiTrinhLocalServiceImpl}.
 * </p>
 *
 * @author tubq
 * @see vn.dtt.ns.yeucaugiaitrinh.dao.service.impl.YeuCauGiaiTrinhLocalServiceImpl
 * @see vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhLocalServiceUtil
 * @generated
 */
public abstract class YeuCauGiaiTrinhLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements YeuCauGiaiTrinhLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhLocalServiceUtil} to access the yeu cau giai trinh local service.
	 */

	/**
	 * Adds the yeu cau giai trinh to the database. Also notifies the appropriate model listeners.
	 *
	 * @param yeuCauGiaiTrinh the yeu cau giai trinh
	 * @return the yeu cau giai trinh that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public YeuCauGiaiTrinh addYeuCauGiaiTrinh(YeuCauGiaiTrinh yeuCauGiaiTrinh)
		throws SystemException {
		yeuCauGiaiTrinh.setNew(true);

		return yeuCauGiaiTrinhPersistence.update(yeuCauGiaiTrinh);
	}

	/**
	 * Creates a new yeu cau giai trinh with the primary key. Does not add the yeu cau giai trinh to the database.
	 *
	 * @param id the primary key for the new yeu cau giai trinh
	 * @return the new yeu cau giai trinh
	 */
	@Override
	public YeuCauGiaiTrinh createYeuCauGiaiTrinh(long id) {
		return yeuCauGiaiTrinhPersistence.create(id);
	}

	/**
	 * Deletes the yeu cau giai trinh with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the yeu cau giai trinh
	 * @return the yeu cau giai trinh that was removed
	 * @throws PortalException if a yeu cau giai trinh with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public YeuCauGiaiTrinh deleteYeuCauGiaiTrinh(long id)
		throws PortalException, SystemException {
		return yeuCauGiaiTrinhPersistence.remove(id);
	}

	/**
	 * Deletes the yeu cau giai trinh from the database. Also notifies the appropriate model listeners.
	 *
	 * @param yeuCauGiaiTrinh the yeu cau giai trinh
	 * @return the yeu cau giai trinh that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public YeuCauGiaiTrinh deleteYeuCauGiaiTrinh(
		YeuCauGiaiTrinh yeuCauGiaiTrinh) throws SystemException {
		return yeuCauGiaiTrinhPersistence.remove(yeuCauGiaiTrinh);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(YeuCauGiaiTrinh.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return yeuCauGiaiTrinhPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.ns.yeucaugiaitrinh.dao.model.impl.YeuCauGiaiTrinhModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return yeuCauGiaiTrinhPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.ns.yeucaugiaitrinh.dao.model.impl.YeuCauGiaiTrinhModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return yeuCauGiaiTrinhPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return yeuCauGiaiTrinhPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return yeuCauGiaiTrinhPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public YeuCauGiaiTrinh fetchYeuCauGiaiTrinh(long id)
		throws SystemException {
		return yeuCauGiaiTrinhPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the yeu cau giai trinh with the primary key.
	 *
	 * @param id the primary key of the yeu cau giai trinh
	 * @return the yeu cau giai trinh
	 * @throws PortalException if a yeu cau giai trinh with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public YeuCauGiaiTrinh getYeuCauGiaiTrinh(long id)
		throws PortalException, SystemException {
		return yeuCauGiaiTrinhPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return yeuCauGiaiTrinhPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the yeu cau giai trinhs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.ns.yeucaugiaitrinh.dao.model.impl.YeuCauGiaiTrinhModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of yeu cau giai trinhs
	 * @param end the upper bound of the range of yeu cau giai trinhs (not inclusive)
	 * @return the range of yeu cau giai trinhs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<YeuCauGiaiTrinh> getYeuCauGiaiTrinhs(int start, int end)
		throws SystemException {
		return yeuCauGiaiTrinhPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of yeu cau giai trinhs.
	 *
	 * @return the number of yeu cau giai trinhs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getYeuCauGiaiTrinhsCount() throws SystemException {
		return yeuCauGiaiTrinhPersistence.countAll();
	}

	/**
	 * Updates the yeu cau giai trinh in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param yeuCauGiaiTrinh the yeu cau giai trinh
	 * @return the yeu cau giai trinh that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public YeuCauGiaiTrinh updateYeuCauGiaiTrinh(
		YeuCauGiaiTrinh yeuCauGiaiTrinh) throws SystemException {
		return yeuCauGiaiTrinhPersistence.update(yeuCauGiaiTrinh);
	}

	/**
	 * Returns the chi tiet yeu cau giai trinh local service.
	 *
	 * @return the chi tiet yeu cau giai trinh local service
	 */
	public vn.dtt.ns.yeucaugiaitrinh.dao.service.ChiTietYeuCauGiaiTrinhLocalService getChiTietYeuCauGiaiTrinhLocalService() {
		return chiTietYeuCauGiaiTrinhLocalService;
	}

	/**
	 * Sets the chi tiet yeu cau giai trinh local service.
	 *
	 * @param chiTietYeuCauGiaiTrinhLocalService the chi tiet yeu cau giai trinh local service
	 */
	public void setChiTietYeuCauGiaiTrinhLocalService(
		vn.dtt.ns.yeucaugiaitrinh.dao.service.ChiTietYeuCauGiaiTrinhLocalService chiTietYeuCauGiaiTrinhLocalService) {
		this.chiTietYeuCauGiaiTrinhLocalService = chiTietYeuCauGiaiTrinhLocalService;
	}

	/**
	 * Returns the chi tiet yeu cau giai trinh remote service.
	 *
	 * @return the chi tiet yeu cau giai trinh remote service
	 */
	public vn.dtt.ns.yeucaugiaitrinh.dao.service.ChiTietYeuCauGiaiTrinhService getChiTietYeuCauGiaiTrinhService() {
		return chiTietYeuCauGiaiTrinhService;
	}

	/**
	 * Sets the chi tiet yeu cau giai trinh remote service.
	 *
	 * @param chiTietYeuCauGiaiTrinhService the chi tiet yeu cau giai trinh remote service
	 */
	public void setChiTietYeuCauGiaiTrinhService(
		vn.dtt.ns.yeucaugiaitrinh.dao.service.ChiTietYeuCauGiaiTrinhService chiTietYeuCauGiaiTrinhService) {
		this.chiTietYeuCauGiaiTrinhService = chiTietYeuCauGiaiTrinhService;
	}

	/**
	 * Returns the chi tiet yeu cau giai trinh persistence.
	 *
	 * @return the chi tiet yeu cau giai trinh persistence
	 */
	public ChiTietYeuCauGiaiTrinhPersistence getChiTietYeuCauGiaiTrinhPersistence() {
		return chiTietYeuCauGiaiTrinhPersistence;
	}

	/**
	 * Sets the chi tiet yeu cau giai trinh persistence.
	 *
	 * @param chiTietYeuCauGiaiTrinhPersistence the chi tiet yeu cau giai trinh persistence
	 */
	public void setChiTietYeuCauGiaiTrinhPersistence(
		ChiTietYeuCauGiaiTrinhPersistence chiTietYeuCauGiaiTrinhPersistence) {
		this.chiTietYeuCauGiaiTrinhPersistence = chiTietYeuCauGiaiTrinhPersistence;
	}

	/**
	 * Returns the trang thai giai trinh local service.
	 *
	 * @return the trang thai giai trinh local service
	 */
	public vn.dtt.ns.yeucaugiaitrinh.dao.service.TrangThaiGiaiTrinhLocalService getTrangThaiGiaiTrinhLocalService() {
		return trangThaiGiaiTrinhLocalService;
	}

	/**
	 * Sets the trang thai giai trinh local service.
	 *
	 * @param trangThaiGiaiTrinhLocalService the trang thai giai trinh local service
	 */
	public void setTrangThaiGiaiTrinhLocalService(
		vn.dtt.ns.yeucaugiaitrinh.dao.service.TrangThaiGiaiTrinhLocalService trangThaiGiaiTrinhLocalService) {
		this.trangThaiGiaiTrinhLocalService = trangThaiGiaiTrinhLocalService;
	}

	/**
	 * Returns the trang thai giai trinh remote service.
	 *
	 * @return the trang thai giai trinh remote service
	 */
	public vn.dtt.ns.yeucaugiaitrinh.dao.service.TrangThaiGiaiTrinhService getTrangThaiGiaiTrinhService() {
		return trangThaiGiaiTrinhService;
	}

	/**
	 * Sets the trang thai giai trinh remote service.
	 *
	 * @param trangThaiGiaiTrinhService the trang thai giai trinh remote service
	 */
	public void setTrangThaiGiaiTrinhService(
		vn.dtt.ns.yeucaugiaitrinh.dao.service.TrangThaiGiaiTrinhService trangThaiGiaiTrinhService) {
		this.trangThaiGiaiTrinhService = trangThaiGiaiTrinhService;
	}

	/**
	 * Returns the trang thai giai trinh persistence.
	 *
	 * @return the trang thai giai trinh persistence
	 */
	public TrangThaiGiaiTrinhPersistence getTrangThaiGiaiTrinhPersistence() {
		return trangThaiGiaiTrinhPersistence;
	}

	/**
	 * Sets the trang thai giai trinh persistence.
	 *
	 * @param trangThaiGiaiTrinhPersistence the trang thai giai trinh persistence
	 */
	public void setTrangThaiGiaiTrinhPersistence(
		TrangThaiGiaiTrinhPersistence trangThaiGiaiTrinhPersistence) {
		this.trangThaiGiaiTrinhPersistence = trangThaiGiaiTrinhPersistence;
	}

	/**
	 * Returns the trang thai giai trinh finder.
	 *
	 * @return the trang thai giai trinh finder
	 */
	public TrangThaiGiaiTrinhFinder getTrangThaiGiaiTrinhFinder() {
		return trangThaiGiaiTrinhFinder;
	}

	/**
	 * Sets the trang thai giai trinh finder.
	 *
	 * @param trangThaiGiaiTrinhFinder the trang thai giai trinh finder
	 */
	public void setTrangThaiGiaiTrinhFinder(
		TrangThaiGiaiTrinhFinder trangThaiGiaiTrinhFinder) {
		this.trangThaiGiaiTrinhFinder = trangThaiGiaiTrinhFinder;
	}

	/**
	 * Returns the yeu cau giai trinh local service.
	 *
	 * @return the yeu cau giai trinh local service
	 */
	public vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhLocalService getYeuCauGiaiTrinhLocalService() {
		return yeuCauGiaiTrinhLocalService;
	}

	/**
	 * Sets the yeu cau giai trinh local service.
	 *
	 * @param yeuCauGiaiTrinhLocalService the yeu cau giai trinh local service
	 */
	public void setYeuCauGiaiTrinhLocalService(
		vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhLocalService yeuCauGiaiTrinhLocalService) {
		this.yeuCauGiaiTrinhLocalService = yeuCauGiaiTrinhLocalService;
	}

	/**
	 * Returns the yeu cau giai trinh remote service.
	 *
	 * @return the yeu cau giai trinh remote service
	 */
	public vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhService getYeuCauGiaiTrinhService() {
		return yeuCauGiaiTrinhService;
	}

	/**
	 * Sets the yeu cau giai trinh remote service.
	 *
	 * @param yeuCauGiaiTrinhService the yeu cau giai trinh remote service
	 */
	public void setYeuCauGiaiTrinhService(
		vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhService yeuCauGiaiTrinhService) {
		this.yeuCauGiaiTrinhService = yeuCauGiaiTrinhService;
	}

	/**
	 * Returns the yeu cau giai trinh persistence.
	 *
	 * @return the yeu cau giai trinh persistence
	 */
	public YeuCauGiaiTrinhPersistence getYeuCauGiaiTrinhPersistence() {
		return yeuCauGiaiTrinhPersistence;
	}

	/**
	 * Sets the yeu cau giai trinh persistence.
	 *
	 * @param yeuCauGiaiTrinhPersistence the yeu cau giai trinh persistence
	 */
	public void setYeuCauGiaiTrinhPersistence(
		YeuCauGiaiTrinhPersistence yeuCauGiaiTrinhPersistence) {
		this.yeuCauGiaiTrinhPersistence = yeuCauGiaiTrinhPersistence;
	}

	/**
	 * Returns the yeu cau giai trinh finder.
	 *
	 * @return the yeu cau giai trinh finder
	 */
	public YeuCauGiaiTrinhFinder getYeuCauGiaiTrinhFinder() {
		return yeuCauGiaiTrinhFinder;
	}

	/**
	 * Sets the yeu cau giai trinh finder.
	 *
	 * @param yeuCauGiaiTrinhFinder the yeu cau giai trinh finder
	 */
	public void setYeuCauGiaiTrinhFinder(
		YeuCauGiaiTrinhFinder yeuCauGiaiTrinhFinder) {
		this.yeuCauGiaiTrinhFinder = yeuCauGiaiTrinhFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("vn.dtt.ns.yeucaugiaitrinh.dao.model.YeuCauGiaiTrinh",
			yeuCauGiaiTrinhLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"vn.dtt.ns.yeucaugiaitrinh.dao.model.YeuCauGiaiTrinh");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return YeuCauGiaiTrinh.class;
	}

	protected String getModelClassName() {
		return YeuCauGiaiTrinh.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = yeuCauGiaiTrinhPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = vn.dtt.ns.yeucaugiaitrinh.dao.service.ChiTietYeuCauGiaiTrinhLocalService.class)
	protected vn.dtt.ns.yeucaugiaitrinh.dao.service.ChiTietYeuCauGiaiTrinhLocalService chiTietYeuCauGiaiTrinhLocalService;
	@BeanReference(type = vn.dtt.ns.yeucaugiaitrinh.dao.service.ChiTietYeuCauGiaiTrinhService.class)
	protected vn.dtt.ns.yeucaugiaitrinh.dao.service.ChiTietYeuCauGiaiTrinhService chiTietYeuCauGiaiTrinhService;
	@BeanReference(type = ChiTietYeuCauGiaiTrinhPersistence.class)
	protected ChiTietYeuCauGiaiTrinhPersistence chiTietYeuCauGiaiTrinhPersistence;
	@BeanReference(type = vn.dtt.ns.yeucaugiaitrinh.dao.service.TrangThaiGiaiTrinhLocalService.class)
	protected vn.dtt.ns.yeucaugiaitrinh.dao.service.TrangThaiGiaiTrinhLocalService trangThaiGiaiTrinhLocalService;
	@BeanReference(type = vn.dtt.ns.yeucaugiaitrinh.dao.service.TrangThaiGiaiTrinhService.class)
	protected vn.dtt.ns.yeucaugiaitrinh.dao.service.TrangThaiGiaiTrinhService trangThaiGiaiTrinhService;
	@BeanReference(type = TrangThaiGiaiTrinhPersistence.class)
	protected TrangThaiGiaiTrinhPersistence trangThaiGiaiTrinhPersistence;
	@BeanReference(type = TrangThaiGiaiTrinhFinder.class)
	protected TrangThaiGiaiTrinhFinder trangThaiGiaiTrinhFinder;
	@BeanReference(type = vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhLocalService.class)
	protected vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhLocalService yeuCauGiaiTrinhLocalService;
	@BeanReference(type = vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhService.class)
	protected vn.dtt.ns.yeucaugiaitrinh.dao.service.YeuCauGiaiTrinhService yeuCauGiaiTrinhService;
	@BeanReference(type = YeuCauGiaiTrinhPersistence.class)
	protected YeuCauGiaiTrinhPersistence yeuCauGiaiTrinhPersistence;
	@BeanReference(type = YeuCauGiaiTrinhFinder.class)
	protected YeuCauGiaiTrinhFinder yeuCauGiaiTrinhFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private YeuCauGiaiTrinhLocalServiceClpInvoker _clpInvoker = new YeuCauGiaiTrinhLocalServiceClpInvoker();
}